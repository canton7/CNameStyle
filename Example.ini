[Variables may have a unit suffix]
kind = variable, parameter, struct_member, union_member
suffix = (_[a-zA-Z][a-zA-Z0-9]*)?

[Static variables begin with s_]
kind = variable
visibility = file
prefix = s_

[Static functions are PascalCase]
kind = function
visibility = file
rule = ${case:pascal}

[Global functions are PascalCase and start with the filename]
kind = function
visibility = global
rule = ${filename}_${case:pascal}

[Pointer parameters and local variables of char type must be camelCase starting with an optional 'p']
kind = parameter, variable, struct_member
visibility = local
pointer = true
type = (const )?char \*(const)?
rule = (p{${pointer-level}}${case:pascal})|(${case:camel})

[Pointer parameters and local variables must be camelCase starting with 'p']
kind = parameter, variable, struct_member
visibility = local, file
pointer = true
rule = p{${pointer-level}}${case:pascal}

[Global variables must be begin with the file name]
kind = variable
visibility = global
prefix = ${filename}_

[Global pointer variables must begin with 'p']
kind = variable
visibility = global
pointer = true
prefix = p{${pointer-level}}

[Global variables must be PascalCase]
kind = variable
visibility = global
rule = ${case:pascal}

[Parameters and local variables must be camelCase]
kind = parameter, variable, struct_member
visibility = local, file
rule = ${case:camel}

[Enum members must start with the enum name]
kind = enum_constant
parent_match = (?P<name>.*)_t(ag)?
rule = ${parent}_${case:pascal}

[Struct and enum tags must be PascalCase ending in _tag]
kind = struct_tag, enum_tag
visibility = global
rule = ${filename}(_${case:pascal})?_tag

[Local struct and enum tags must be PascalCase ending in _tag]
kind = struct_tag, enum_tag
visibility = file
rule = ${case:pascal}?_tag

[Struct and enum typedefs must be PascalCase ending in _t]
kind = typedef
visibility = global
rule = ${filename}(_${case:pascal})?_t

[Local struct and enum typedefs must be PascalCase ending in _t]
kind = typedef
visibility = file
rule = ${case:pascal}_t
