[Static variables begin with s_]
kind = variable
visibility = file
prefix = s_

[All globals begin with the file name]
kind = variable, function, tag, typedef
visibility = global
prefix = ${filename}_

[Tags end in _tag]
kind = tag
suffix = _tag

[Typedefs end in _t]
kind = typedef
suffix = _t

[Variables may have a unit suffix]
kind = variable, parameter, member
suffix = (_[a-zA-Z][a-zA-Z0-9]*)?

[Global tags/typedefs may be file name + _tag/_t]
kind = tag, struct-typedef, enum-typedef, union-typedef
visibility = global
prefix =  
allow-rule = ${filename}

[Tags, typedefs, functions are PascalCase]
kind = tag, typedef, function
rule = ${case:pascal}

[Global pointer variables begin with 'p']
kind = variable
visibility = global
pointer = true
prefix = p{${pointer-level}}

[Global variables are PascalCase]
kind = variable
visibility = global
rule = ${case:pascal}

[Pointer variables which are const char are camelCase]
kind = parameter, variable, struct-member
visibility = local, file
type = const char \*(const)?
rule = ${case:camel}

[Pointer variables are PascalCase starting with 'p']
kind = parameter, variable, struct-member
visibility = local, file
pointer = true
rule = p{${pointer-level}}${case:pascal}

[Variables are camelCase]
kind = parameter, variable, struct-member
visibility = local, file
rule = (?!p[A-Z])${case:camel}

[Enum members start with the enum name]
kind = enum-constant
parent_match = (?P<name>.*)_t(ag)?
rule = ${parent}_${case:pascal}
